Microsoft (R) Macro Assembler Version 14.29.30136.0	    11/04/21 14:28:10
io.asm							     Page 1 - 1


				; data conversion procedures - 32-bit versions
				; author:  R. Detmer
				; revised: 10/2007

				.586
				.MODEL FLAT
				PUBLIC wtoaproc, atowproc, dtoaproc, atodproc

 00000000			.CODE

				; wtoaproc(source, dest)
				; convert integer (source) to string of 6 characters at given destination address
				; source integer passed as a doubleword, but only low-order word is processed
 00000000			wtoaproc    PROC
 00000000  55			            push   ebp                  ; save base pointer
 00000001  8B EC		            mov    ebp, esp             ; establish stack frame
 00000003  50			            push   eax                  ; Save registers
 00000004  53			            push   ebx
 00000005  51			            push   ecx
 00000006  52			            push   edx
 00000007  57			            push   edi
 00000008  9C			            pushfd                     ; save flags

 00000009  8B 45 08		            mov    eax, [ebp+8]        ; first parameter (source integer)
 0000000C  25 0000FFFF		            and    eax, 0ffffh         ; mask high-order word
 00000011  8B 7D 0C		            mov    edi, [ebp+12]       ; second parameter (dest offset)
 00000014  66| 3D 8000		ifSpecW:    cmp    ax,8000h            ; special case -32,768?
 00000018  75 19		            jne    EndIfSpecW          ; if not, then normal case
 0000001A  C6 07 2D		            mov    BYTE PTR [edi],'-'  ; manually put in ASCII codes
 0000001D  C6 47 01 33		            mov    BYTE PTR [edi+1],'3'  ;   for -32,768
 00000021  C6 47 02 32		            mov    BYTE PTR [edi+2],'2'
 00000025  C6 47 03 37		            mov    BYTE PTR [edi+3],'7'
 00000029  C6 47 04 36		            mov    BYTE PTR [edi+4],'6'
 0000002D  C6 47 05 38		            mov    BYTE PTR [edi+5],'8'
 00000031  EB 32		            jmp    ExitIToA            ; done with special case
 00000033			EndIfSpecW:

 00000033  50			            push eax                   ; save source number

 00000034  B0 20		            mov    al,' '              ; put blanks in
 00000036  B9 00000005		            mov    ecx,5               ;   first five
 0000003B  FC			            cld                        ;   bytes of
 0000003C  F3/ AA		            rep stosb                  ;   destination field    

 0000003E  58			            pop    eax                 ; restore source number
 0000003F  B1 20		            mov    cl,' '              ; default sign (blank for +)
 00000041  66| 83 F8 00		IfNegW:     cmp    ax,0                ; check sign of number
 00000045  7D 05		            jge    EndIfNegW           ; skip if not negative
 00000047  B1 2D		            mov    cl,'-'              ; sign for negative number
 00000049  66| F7 D8		            neg    ax                  ; number in AX now >= 0
 0000004C			EndIfNegW:

 0000004C  66| BB 000A		            mov    bx,10               ; divisor

 00000050  66| BA 0000		WhileMoreW: mov    dx,0                ; extend number to doubleword
 00000054  66| F7 F3		            div    bx                  ; divide by 10
 00000057  80 C2 30		            add    dl,'0'              ; convert remainder to character
 0000005A  88 17		            mov    [edi],dl            ; put character in string
 0000005C  4F			            dec    edi                 ; move forward to next position
 0000005D  66| 83 F8 00		            cmp    ax,0                ; check quotient
 00000061  75 ED		            jnz    WhileMoreW          ; continue if quotient not zero

 00000063  88 0F		            mov    [edi],cl            ; insert blank or "-" for sign

 00000065  9D			ExitIToA:   popfd                      ; restore flags and registers
 00000066  5F			            pop    edi
 00000067  5A			            pop    edx
 00000068  59			            pop    ecx
 00000069  5B			            pop    ebx 
 0000006A  58			            pop    eax
 0000006B  5D			            pop    ebp 
 0000006C  C3			            ret                        ;exit
 0000006D			wtoaproc    ENDP

				; dtoaproc(source, dest)
				; convert double (source) to string of 11 characters at given destination address
 0000006D			dtoaproc    PROC   NEAR32
 0000006D  55			            push   ebp                 ; save base pointer
 0000006E  8B EC		            mov    ebp, esp            ; establish stack frame
 00000070  50			            push   eax                 ; Save registers
 00000071  53			            push   ebx                 ;   used by
 00000072  51			            push   ecx                 ;   procedure
 00000073  52			            push   edx
 00000074  57			            push   edi
 00000075  9C			            pushfd                      ; save flags

 00000076  8B 45 08		            mov    eax, [ebp+8]         ; first parameter (source double)
 00000079  8B 7D 0C		            mov    edi, [ebp+12]        ; second parameter (dest addr)
 0000007C  3D 80000000		ifSpecialD: cmp    eax,80000000h        ; special case -2,147,483,648?
 00000081  75 2D		            jne    EndIfSpecialD        ; if not, then normal case
 00000083  C6 07 2D		            mov    BYTE PTR [edi],'-'   ; manually put in ASCII codes
 00000086  C6 47 01 32		            mov    BYTE PTR [edi+1],'2' ;   for -2,147,483,648
 0000008A  C6 47 02 31		            mov    BYTE PTR [edi+2],'1'
 0000008E  C6 47 03 34		            mov    BYTE PTR [edi+3],'4'
 00000092  C6 47 04 37		            mov    BYTE PTR [edi+4],'7'
 00000096  C6 47 05 34		            mov    BYTE PTR [edi+5],'4'
 0000009A  C6 47 06 38		            mov    BYTE PTR [edi+6],'8'
 0000009E  C6 47 07 33		            mov    BYTE PTR [edi+7],'3'
 000000A2  C6 47 08 36		            mov    BYTE PTR [edi+8],'6'
 000000A6  C6 47 09 34		            mov    BYTE PTR [edi+9],'4'
 000000AA  C6 47 0A 38		            mov    BYTE PTR [edi+10],'8'
 000000AE  EB 30		            jmp    ExitDToA            ; done with special case
 000000B0			EndIfSpecialD:

 000000B0  50			            push   eax                 ; save source number

 000000B1  B0 20		            mov    al,' '              ; put blanks in
 000000B3  B9 0000000A		            mov    ecx,10              ;   first ten
 000000B8  FC			            cld                        ;   bytes of
 000000B9  F3/ AA		            rep stosb                  ;   destination field    

 000000BB  58			            pop    eax                 ; copy source number
 000000BC  B1 20		            mov    cl,' '              ; default sign (blank for +)
 000000BE  83 F8 00		IfNegD:     cmp    eax,0               ; check sign of number
 000000C1  7D 04		            jge    EndIfNegD           ; skip if not negative
 000000C3  B1 2D		            mov    cl,'-'              ; sign for negative number
 000000C5  F7 D8		            neg    eax                 ; number in EAX now >= 0
 000000C7			EndIfNegD:

 000000C7  BB 0000000A		            mov    ebx,10              ; divisor

 000000CC  BA 00000000		WhileMoreD: mov    edx,0               ; extend number to doubleword
 000000D1  F7 F3		            div    ebx                 ; divide by 10
 000000D3  80 C2 30		            add    dl,30h              ; convert remainder to character
 000000D6  88 17		            mov    [edi],dl            ; put character in string
 000000D8  4F			            dec    edi                 ; move forward to next position
 000000D9  83 F8 00		            cmp    eax,0               ; check quotient
 000000DC  75 EE		            jnz    WhileMoreD          ; continue if quotient not zero

 000000DE  88 0F		            mov    [edi],cl            ; insert blank or "-" for sign

 000000E0  9D			ExitDToA:   popfd                      ; restore flags and registers
 000000E1  5F			            pop    edi
 000000E2  5A			            pop    edx
 000000E3  59			            pop    ecx
 000000E4  5B			            pop    ebx 
 000000E5  58			            pop    eax
 000000E6  5D			            pop    ebp 
 000000E7  C3			            ret                        ;exit
 000000E8			dtoaproc    ENDP

				; atowproc(source)
				; Procedure to scan data segment starting at source address, interpreting 
				; ASCII characters as an word-size integer value which is returned in AX.

				; Leading blanks are skipped.  A leading - or + sign is acceptable.
				; Digit(s) must immediately follow the sign (if any).
				; Memory scan is terminated by any non-digit.

				; No error checking is done. If the number is outside the range for a
				; signed word, then the return value is undefined.

 000000E8			atowproc    PROC
 000000E8  55			            push   ebp                 ; save base pointer
 000000E9  8B EC		            mov    ebp, esp            ; establish stack frame
 000000EB  83 EC 02		            sub    esp, 2              ; local space for sign
 000000EE  53			            push   ebx                 ; Save registers
 000000EF  52			            push   edx
 000000F0  56			            push   esi
 000000F1  9C			            pushfd                     ; save flags

 000000F2  8B 75 08		            mov    esi,[ebp+8]         ; get parameter (source addr)

 000000F5  80 3E 20		WhileBlankW:cmp    BYTE PTR [esi],' '  ; space?
 000000F8  75 03		            jne    EndWhileBlankW      ; exit if not
 000000FA  46			            inc    esi                 ; increment character pointer
 000000FB  EB F8		            jmp    WhileBlankW         ; and try again
 000000FD			EndWhileBlankW:

 000000FD  66| B8 0001		            mov    ax,1                ; default sign multiplier
 00000101  80 3E 2B		IfPlusW:    cmp    BYTE PTR [esi],'+'  ; leading + ?
 00000104  74 09		            je     SkipSignW           ; if so, skip over
 00000106  80 3E 2D		IfMinusW:   cmp    BYTE PTR [esi],'-'  ; leading - ?
 00000109  75 05		            jne    EndIfSignW          ; if not, save default +
 0000010B  66| B8 FFFF		            mov    ax,-1               ; -1 for minus sign
 0000010F  46			SkipSignW:  inc    esi                 ; move past sign
 00000110			EndIfSignW:

 00000110  66| 89 45 FE		            mov    [ebp-2],ax          ; save sign multiplier
 00000114  66| B8 0000		            mov    ax,0                ; number being accumulated

 00000118  80 3E 30		WhileDigitW:cmp    BYTE PTR [esi],'0'  ; next character >= '0'
 0000011B  7C 15		            jnge   EndWhileDigitW      ; exit if not
 0000011D  80 3E 39		            cmp    BYTE PTR [esi],'9'  ; next character <= '9'
 00000120  7F 10		            jnle   EndWhileDigitW      ; not a digit if bigger than '9'
 00000122  66| 6B C0 0A		            imul   ax,10               ; multiply old number by 10
 00000126  8A 1E		            mov    bl,[esi]            ; ASCII character to BL
 00000128  66| 83 E3 0F		            and    bx,000Fh            ; convert to single-digit integer
 0000012C  66| 03 C3		            add    ax,bx               ; add to sum
 0000012F  46			            inc    esi                 ; increment character pointer
 00000130  EB E6		            jmp    WhileDigitW         ; go try next character
 00000132			EndWhileDigitW:

				; if value is < 8000h, multiply by sign
 00000132  66| 3D 8000		            cmp    ax,8000h            ; 8000h?
 00000136  73 04		            jnb    endIfMaxW           ; skip if not
 00000138  66| F7 6D FE		            imul   WORD PTR [ebp-2]    ; make signed number
 0000013C			endIfMaxW:

 0000013C  9D			            popfd                      ; restore flags
 0000013D  5E			            pop    esi                 ; restore registers
 0000013E  5A			            pop    edx
 0000013F  5B			            pop    ebx
 00000140  8B E5		            mov    esp, ebp            ; delete local variable space
 00000142  5D			            pop    ebp 
 00000143  C3			            ret                        ; exit
 00000144			atowproc    ENDP

				; atodproc(source)
				; Procedure to scan data segment starting at source address, interpreting 
				; ASCII characters as an doubleword-size integer value which is returned in EAX.

				; Leading blanks are skipped.  A leading - or + sign is acceptable.
				; Digit(s) must immediately follow the sign (if any).
				; Memory scan is terminated by any non-digit.

				; No error checking is done. If the number is outside the range for a
				; signed word, then the return value is undefined.

 00000144			atodproc    PROC
 00000144  55			            push   ebp                 ; save base pointer
 00000145  8B EC		            mov    ebp, esp            ; establish stack frame
 00000147  83 EC 04		            sub    esp, 4              ; local space for sign
 0000014A  53			            push   ebx                 ; Save registers
 0000014B  52			            push   edx
 0000014C  56			            push   esi
 0000014D  9C			            pushfd                     ; save flags

 0000014E  8B 75 08		            mov    esi,[ebp+8]         ; get parameter (source addr)

 00000151  80 3E 20		WhileBlankD:cmp    BYTE PTR [esi],' '  ; space?
 00000154  75 03		            jne    EndWhileBlankD      ; exit if not
 00000156  46			            inc    esi                 ; increment character pointer
 00000157  EB F8		            jmp    WhileBlankD         ; and try again
 00000159			EndWhileBlankD:

 00000159  B8 00000001		            mov    eax,1               ; default sign multiplier
 0000015E  80 3E 2B		IfPlusD:    cmp    BYTE PTR [esi],'+'  ; leading + ?
 00000161  74 0A		            je     SkipSignD           ; if so, skip over
 00000163  80 3E 2D		IfMinusD:   cmp    BYTE PTR [esi],'-'  ; leading - ?
 00000166  75 06		            jne    EndIfSignD          ; if not, save default +
 00000168  B8 FFFFFFFF		            mov    eax,-1              ; -1 for minus sign
 0000016D  46			SkipSignD:  inc    esi                 ; move past sign
 0000016E			EndIfSignD:

 0000016E  89 45 FC		            mov    [ebp-4],eax         ; save sign multiplier
 00000171  B8 00000000		            mov    eax,0               ; number being accumulated

 00000176  80 3E 30		WhileDigitD:cmp    BYTE PTR [esi],'0'  ; compare next character to '0'
 00000179  7C 12		            jl     EndWhileDigitD      ; not a digit if smaller than '0'
 0000017B  80 3E 39		            cmp    BYTE PTR [esi],'9'  ; compare to '9'
 0000017E  7F 0D		            jg     EndWhileDigitD      ; not a digit if bigger than '9'
 00000180  6B C0 0A		            imul   eax,10              ; multiply old number by 10
 00000183  8A 1E		            mov    bl,[esi]            ; ASCII character to BL
 00000185  83 E3 0F		            and    ebx,0000000Fh       ; convert to single-digit integer
 00000188  03 C3		            add    eax,ebx             ; add to sum
 0000018A  46			            inc    esi                 ; increment character pointer
 0000018B  EB E9		            jmp    WhileDigitD         ; go try next character
 0000018D			EndWhileDigitD:

				; if value is < 80000000h, multiply by sign
 0000018D  3D 80000000		            cmp    eax,80000000h       ; 80000000h?
 00000192  73 03		            jnb    endIfMaxD           ; skip if not
 00000194  F7 6D FC		            imul   DWORD PTR [ebp-4]   ; make signed number
 00000197			endIfMaxD:

 00000197  9D			            popfd                      ; restore flags
 00000198  5E			            pop    esi                 ; restore registers
 00000199  5A			            pop    edx
 0000019A  5B			            pop    ebx
 0000019B  8B E5		            mov    esp, ebp            ; delete local variable space
 0000019D  5D			            pop    ebp 
 0000019E  C3			            ret                        ; exit
 0000019F			atodproc    ENDP

				            END
Microsoft (R) Macro Assembler Version 14.29.30136.0	    11/04/21 14:28:10
io.asm							     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00000000 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000019F Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

atodproc . . . . . . . . . . . .	P Near	 00000144 _TEXT	Length= 0000005B Public
  WhileBlankD  . . . . . . . . .	L Near	 00000151 _TEXT	
  EndWhileBlankD . . . . . . . .	L Near	 00000159 _TEXT	
  IfPlusD  . . . . . . . . . . .	L Near	 0000015E _TEXT	
  IfMinusD . . . . . . . . . . .	L Near	 00000163 _TEXT	
  SkipSignD  . . . . . . . . . .	L Near	 0000016D _TEXT	
  EndIfSignD . . . . . . . . . .	L Near	 0000016E _TEXT	
  WhileDigitD  . . . . . . . . .	L Near	 00000176 _TEXT	
  EndWhileDigitD . . . . . . . .	L Near	 0000018D _TEXT	
  endIfMaxD  . . . . . . . . . .	L Near	 00000197 _TEXT	
atowproc . . . . . . . . . . . .	P Near	 000000E8 _TEXT	Length= 0000005C Public
  WhileBlankW  . . . . . . . . .	L Near	 000000F5 _TEXT	
  EndWhileBlankW . . . . . . . .	L Near	 000000FD _TEXT	
  IfPlusW  . . . . . . . . . . .	L Near	 00000101 _TEXT	
  IfMinusW . . . . . . . . . . .	L Near	 00000106 _TEXT	
  SkipSignW  . . . . . . . . . .	L Near	 0000010F _TEXT	
  EndIfSignW . . . . . . . . . .	L Near	 00000110 _TEXT	
  WhileDigitW  . . . . . . . . .	L Near	 00000118 _TEXT	
  EndWhileDigitW . . . . . . . .	L Near	 00000132 _TEXT	
  endIfMaxW  . . . . . . . . . .	L Near	 0000013C _TEXT	
dtoaproc . . . . . . . . . . . .	P Near	 0000006D _TEXT	Length= 0000007B Public
  ifSpecialD . . . . . . . . . .	L Near	 0000007C _TEXT	
  EndIfSpecialD  . . . . . . . .	L Near	 000000B0 _TEXT	
  IfNegD . . . . . . . . . . . .	L Near	 000000BE _TEXT	
  EndIfNegD  . . . . . . . . . .	L Near	 000000C7 _TEXT	
  WhileMoreD . . . . . . . . . .	L Near	 000000CC _TEXT	
  ExitDToA . . . . . . . . . . .	L Near	 000000E0 _TEXT	
wtoaproc . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000006D Public
  ifSpecW  . . . . . . . . . . .	L Near	 00000014 _TEXT	
  EndIfSpecW . . . . . . . . . .	L Near	 00000033 _TEXT	
  IfNegW . . . . . . . . . . . .	L Near	 00000041 _TEXT	
  EndIfNegW  . . . . . . . . . .	L Near	 0000004C _TEXT	
  WhileMoreW . . . . . . . . . .	L Near	 00000050 _TEXT	
  ExitIToA . . . . . . . . . . .	L Near	 00000065 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT

	   0 Warnings
	   0 Errors
