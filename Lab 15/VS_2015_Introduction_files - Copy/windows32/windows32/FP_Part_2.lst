Microsoft (R) Macro Assembler Version 14.29.30136.0	    12/05/21 17:24:39
FP_Part_2.asm						     Page 1 - 1


				; Example assembly language program -- adds two numbers
				; Author:  Saishnu Ramesh Kumar
				; Date:    12/2/2021
				.586
				.MODEL FLAT
				INCLUDE io.h            ; header file for input/output
			      C ; IO.H -- header file for I/O macros (listing suppressed)
			      C .NOLIST      ; turn off listing
			      C .LIST        ; begin listing
			      C 
				.STACK 4096
 00000000			.DATA

 00000000 45 6E 74 65 72	promptInput BYTE "Enter a string to trim", 0
	   20 61 20 73 74
	   72 69 6E 67 20
	   74 6F 20 74 72
	   69 6D 00
 00000017  00000050 [		strInput BYTE 80 DUP (?)
	    00
	   ]
 00000067  00000050 [		strResult BYTE 80 DUP (?)
	    00
	   ]
 000000B7 41 66 74 65 72	resultLbl BYTE "After trim:", 0
	   20 74 72 69 6D
	   3A 00

 000000C3 00000000		num DWORD ?
 000000C7 0000000A		decbase DWORD 10
 000000CB 00000000		fp4Res REAL4 ?
 000000CF 00000001		signflg DWORD 1

 00000000			.CODE
				;===========================================================================================
				; ASCII To Float (char str[])
				; Description: Converts the string to a floating point number
				; Parameter: NULL terminated string
				; Return Value: The floating point number to be stored in ST(i.e. st(0))


 00000000			strtrim PROC

 00000000  FE 0D 00000017 R		dec strInput
 00000006  75 F8			jnz strtrim

 00000008			strtrim ENDP

 00000008			strlen PROC
					
 00000008  57				push  edi
 00000009  2B DB			sub ebx, ebx
 0000000B  8B 7D 08			mov edi, [EBP+8]
 0000000E  F7 D1			not ecx
					
 00000010  FC				cld

 00000011  F2/ AE			repne scasb 
 00000013  F7 D1			not ecx
 00000015  5F				pop edi
					
 00000016  C3				ret

 00000017			strlen ENDP


 00000017			AsciiToFloat PROC
 00000017  55				push EBP
 00000018  8B EC			mov EBP, ESP
 0000001A  53				push EBX
 0000001B  50				push EAX
 0000001C  51				push ECX
 0000001D  52				push EDX
 0000001E  56				push ESI
 0000001F  57				push EDI
 00000020  9C				pushfd

 00000021  8B 5D 08			mov EBX, [EBP+8]
 00000024  53				push EBX
 00000025  E8 FFFFFFD6			call strtrim
 0000002A  E8 FFFFFFD9			call strlen

 0000002F  D9 EE			fldz

					;find decimal point
 00000031  B9 00000000			mov ECX, 0
 00000036  BB 00000001			mov EBX, 1
 0000003B  8B 7D 08			mov EDI, [EBP+8]

					;check for negative sign
 0000003E  3B C8				cmp ECX, EAX
 00000040  74 66				je noMoreCharacters
 00000042  80 3F 2D				cmp BYTE PTR [EDI], '-'
 00000045  75 0C				jne LoopWholeCalc
 00000047  C7 05 000000CF R			mov signflg, -1
	   FFFFFFFF
 00000051  47					inc EDI
 00000052  41					inc ECX

 00000053					LoopWholeCalc:
 00000053  3B C8					cmp ECX, EAX
 00000055  74 51					je noMoreCharacters
 00000057  80 3F 2E					cmp BYTE PTR [EDI], '.'
 0000005A  74 20					je foundDecimal
 0000005C  BA 00000000					mov EDX, 0
 00000061  8A 17					mov DL, BYTE PTR [EDI]
 00000063  83 EA 30					sub EDX, '0'
 00000066  89 15 000000C3 R				mov num, EDX
 0000006C  DA 0D 000000C7 R				fimul decbase
 00000072  DA 05 000000C3 R				fiadd num
 00000078  47						inc EDI
 00000079  41						inc ECX
 0000007A  EB D7					jmp LoopWholeCalc

 0000007C						foundDecimal:
 0000007C  41							inc ECX
 0000007D  47							inc EDI

 0000007E  D9 E8						fld1

 00000080							LoopFractionCalc:
 00000080  3B C8							cmp ECX, EAX
 00000082  74 24							je noMoreCharacters
 00000084  BA 00000000							mov EDX, 0
 00000089  8A 17							mov DL, BYTE PTR [EDI]
 0000008B  83 EA 30							sub EDX, '0'
 0000008E  89 15 000000C3 R						mov num, EDX
 00000094  DA 35 000000C7 R						fidiv decbase
 0000009A  DB 05 000000C3 R						fild num
 000000A0  D8 C9							fmul st, st(1)
 000000A2  DE C2							faddp st(2), st
 000000A4  47								inc EDI
 000000A5  41								inc ECX
 000000A6  EB D8						jmp LoopFractionCalc


 000000A8							noMoreCharacters:
 000000A8  DD D8							fstp st ;fstp fp4Res

 000000AA  83 C4 04							add ESP, 4
 000000AD  9D								popfd
 000000AE  5F								pop EDI
 000000AF  5E								pop ESI
 000000B0  5A								pop EDX
 000000B1  59								pop ECX
 000000B2  58								pop EAX
 000000B3  5B								pop EBX
 000000B4  5D								pop EBP

 000000B5  C3								ret
 000000B6			AsciiToFloat ENDP

 000000B6			_MainProc PROC

					input promptInput, strInput, 80
 000000D4  8D 1D 00000017 R		lea ebx, strInput
 000000DA  53				push ebx
 000000DB  E8 FFFFFF20			call strtrim
 000000E0  E8 FFFFFF32			call AsciiToFloat
 000000E5  83 C4 04			add esp, 4
					output resultLbl, strInput
						
 00000101  B8 00000000				mov eax, 0 ;exit, return code 0

 00000106  C3				ret
 00000107			_MainProc ENDP
				END   ; end of source code
Microsoft (R) Macro Assembler Version 14.29.30136.0	    12/05/21 17:24:39
FP_Part_2.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

atod . . . . . . . . . . . . . .	Proc
atow . . . . . . . . . . . . . .	Proc
dtoa . . . . . . . . . . . . . .	Proc
input  . . . . . . . . . . . . .	Proc
output . . . . . . . . . . . . .	Proc
wtoa . . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000000D3 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000107 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

AsciiToFloat . . . . . . . . . .	P Near	 00000017 _TEXT	Length= 0000009F Public
  LoopWholeCalc  . . . . . . . .	L Near	 00000053 _TEXT	
  foundDecimal . . . . . . . . .	L Near	 0000007C _TEXT	
  LoopFractionCalc . . . . . . .	L Near	 00000080 _TEXT	
  noMoreCharacters . . . . . . .	L Near	 000000A8 _TEXT	
_MainProc  . . . . . . . . . . .	P Near	 000000B6 _TEXT	Length= 00000051 Public
strlen . . . . . . . . . . . . .	P Near	 00000008 _TEXT	Length= 0000000F Public
strtrim  . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000008 Public


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_getInput  . . . . . . . . . . .	L Near	 00000000 FLAT	External
_showOutput  . . . . . . . . . .	L Near	 00000000 FLAT	External
atodproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
atowproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
decbase  . . . . . . . . . . . .	DWord	 000000C7 _DATA	
dtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
fp4Res . . . . . . . . . . . . .	DWord	 000000CB _DATA	
num  . . . . . . . . . . . . . .	DWord	 000000C3 _DATA	
promptInput  . . . . . . . . . .	Byte	 00000000 _DATA	
resultLbl  . . . . . . . . . . .	Byte	 000000B7 _DATA	
signflg  . . . . . . . . . . . .	DWord	 000000CF _DATA	
strInput . . . . . . . . . . . .	Byte	 00000017 _DATA	
strResult  . . . . . . . . . . .	Byte	 00000067 _DATA	
wtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
