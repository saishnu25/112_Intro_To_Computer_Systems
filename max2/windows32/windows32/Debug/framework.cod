; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30136.0 

	TITLE	C:\Users\Saishnu\Desktop\CSCI 112 - Lab 10\max2\windows32\windows32\Debug\framework.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	__hInstance:DWORD
_DATA	ENDS
PUBLIC	_WinMain@16
PUBLIC	_DlgProc@16
PUBLIC	_getInput
PUBLIC	_showOutput
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_07KGMMFLDN@Warning@			; `string'
PUBLIC	??_C@_0BA@KGPGJABH@Nothing?5entered@		; `string'
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_strcpy:PROC
EXTRN	__imp__DialogBoxParamA@20:PROC
EXTRN	__imp__EndDialog@8:PROC
EXTRN	__imp__GetDlgItem@8:PROC
EXTRN	__imp__SetDlgItemTextA@12:PROC
EXTRN	__imp__GetDlgItemTextA@16:PROC
EXTRN	__imp__GetWindowTextLengthA@4:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_MainProc:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
_BSS	SEGMENT
_buf	DB	0ffH DUP (?)
	ALIGN	4

_inputLabel DB	0ffH DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BA@KGPGJABH@Nothing?5entered@
CONST	SEGMENT
??_C@_0BA@KGPGJABH@Nothing?5entered@ DB 'Nothing entered', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07KGMMFLDN@Warning@
CONST	SEGMENT
??_C@_07KGMMFLDN@Warning@ DB 'Warning', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Saishnu\Desktop\CSCI 112 - Lab 10\max2\windows32\windows32\framework.c
;	COMDAT _showOutput
_TEXT	SEGMENT
_outputLabel$ = 8					; size = 4
_outputString$ = 12					; size = 4
_showOutput PROC					; COMDAT

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd

; 70   : 	MessageBox(NULL, outputString, outputLabel, MB_OK);

  00017	8b f4		 mov	 esi, esp
  00019	6a 00		 push	 0
  0001b	8b 45 08	 mov	 eax, DWORD PTR _outputLabel$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d 0c	 mov	 ecx, DWORD PTR _outputString$[ebp]
  00022	51		 push	 ecx
  00023	6a 00		 push	 0
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
  0002b	3b f4		 cmp	 esi, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 71   : }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
_showOutput ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Saishnu\Desktop\CSCI 112 - Lab 10\max2\windows32\windows32\framework.c
;	COMDAT _getInput
_TEXT	SEGMENT
$T1 = -200						; size = 4
_inputPrompt$ = 8					; size = 4
_result$ = 12						; size = 4
_maxChars$ = 16						; size = 4
_getInput PROC						; COMDAT

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  0000f	b9 03 00 00 00	 mov	 ecx, 3
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd

; 59   : 	strcpy(inputLabel, inputPrompt);

  0001b	8b 45 08	 mov	 eax, DWORD PTR _inputPrompt$[ebp]
  0001e	50		 push	 eax
  0001f	68 00 00 00 00	 push	 OFFSET _inputLabel
  00024	e8 00 00 00 00	 call	 _strcpy
  00029	83 c4 08	 add	 esp, 8

; 60   : 	DialogBox(_hInstance, MAKEINTRESOURCE(IDD_MAIN), NULL, DlgProc);

  0002c	8b f4		 mov	 esi, esp
  0002e	6a 00		 push	 0
  00030	68 00 00 00 00	 push	 OFFSET _DlgProc@16
  00035	6a 00		 push	 0
  00037	6a 65		 push	 101			; 00000065H
  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR __hInstance
  0003e	50		 push	 eax
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamA@20
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 61   : 	buf[maxChars-1] = '\0'; // in case too many characters, terminate string at maxChars

  0004c	8b 45 10	 mov	 eax, DWORD PTR _maxChars$[ebp]
  0004f	83 e8 01	 sub	 eax, 1
  00052	89 85 38 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00058	81 bd 38 ff ff
	ff ff 00 00 00	 cmp	 DWORD PTR $T1[ebp], 255	; 000000ffH
  00062	73 02		 jae	 SHORT $LN3@getInput
  00064	eb 05		 jmp	 SHORT $LN4@getInput
$LN3@getInput:
  00066	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN4@getInput:
  0006b	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00071	c6 81 00 00 00
	00 00		 mov	 BYTE PTR _buf[ecx], 0

; 62   : 	strcpy(result, buf);

  00078	68 00 00 00 00	 push	 OFFSET _buf
  0007d	8b 45 0c	 mov	 eax, DWORD PTR _result$[ebp]
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 _strcpy
  00086	83 c4 08	 add	 esp, 8
$LN2@getInput:

; 63   : 	return;
; 64   : }

  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00092	3b ec		 cmp	 ebp, esp
  00094	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
_getInput ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Saishnu\Desktop\CSCI 112 - Lab 10\max2\windows32\windows32\framework.c
;	COMDAT _DlgProc@16
_TEXT	SEGMENT
tv74 = -208						; size = 4
tv64 = -208						; size = 4
_len$1 = -8						; size = 4
_hwnd$ = 8						; size = 4
_Message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_DlgProc@16 PROC					; COMDAT

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d f0	 lea	 edi, DWORD PTR [ebp-16]
  0000f	b9 04 00 00 00	 mov	 ecx, 4
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd

; 11   : 	switch(Message)

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _Message$[ebp]
  0001e	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv64[ebp], eax
  00024	83 bd 30 ff ff
	ff 10		 cmp	 DWORD PTR tv64[ebp], 16	; 00000010H
  0002b	0f 84 0b 01 00
	00		 je	 $LN11@DlgProc
  00031	81 bd 30 ff ff
	ff 10 01 00 00	 cmp	 DWORD PTR tv64[ebp], 272 ; 00000110H
  0003b	74 11		 je	 SHORT $LN6@DlgProc
  0003d	81 bd 30 ff ff
	ff 11 01 00 00	 cmp	 DWORD PTR tv64[ebp], 273 ; 00000111H
  00047	74 44		 je	 SHORT $LN7@DlgProc
  00049	e9 05 01 00 00	 jmp	 $LN12@DlgProc
$LN6@DlgProc:

; 12   : 	{
; 13   : 		case WM_INITDIALOG:
; 14   : 			// set up the dialog box
; 15   : 			SetDlgItemText(hwnd, IDC_LABEL, inputLabel);

  0004e	8b f4		 mov	 esi, esp
  00050	68 00 00 00 00	 push	 OFFSET _inputLabel
  00055	68 f1 03 00 00	 push	 1009			; 000003f1H
  0005a	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  0005d	50		 push	 eax
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12
  00064	3b f4		 cmp	 esi, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 16   : 			SetDlgItemText(hwnd, IDC_TEXT, "");

  0006b	8b f4		 mov	 esi, esp
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00072	68 e8 03 00 00	 push	 1000			; 000003e8H
  00077	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  0007a	50		 push	 eax
  0007b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12
  00081	3b f4		 cmp	 esi, esp
  00083	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 17   : 		break;

  00088	e9 ca 00 00 00	 jmp	 $LN2@DlgProc
$LN7@DlgProc:

; 18   : 
; 19   : 		case WM_COMMAND:
; 20   : 			switch(LOWORD(wParam))

  0008d	8b 45 10	 mov	 eax, DWORD PTR _wParam$[ebp]
  00090	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00095	0f b7 c8	 movzx	 ecx, ax
  00098	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv74[ebp], ecx
  0009e	81 bd 30 ff ff
	ff ef 03 00 00	 cmp	 DWORD PTR tv74[ebp], 1007 ; 000003efH
  000a8	74 05		 je	 SHORT $LN8@DlgProc
  000aa	e9 8b 00 00 00	 jmp	 $LN4@DlgProc
$LN8@DlgProc:

; 21   : 			{
; 22   : 				case IDC_OK:
; 23   : 				{
; 24   : 					// When somebody clicks OK, get the number of characters entered
; 25   : 					int len = GetWindowTextLength(GetDlgItem(hwnd, IDC_TEXT));

  000af	8b f4		 mov	 esi, esp
  000b1	68 e8 03 00 00	 push	 1000			; 000003e8H
  000b6	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  000b9	50		 push	 eax
  000ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  000c0	3b f4		 cmp	 esi, esp
  000c2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c7	8b f4		 mov	 esi, esp
  000c9	50		 push	 eax
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextLengthA@4
  000d0	3b f4		 cmp	 esi, esp
  000d2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d7	89 45 f8	 mov	 DWORD PTR _len$1[ebp], eax

; 26   : 					if(len > 0)

  000da	83 7d f8 00	 cmp	 DWORD PTR _len$1[ebp], 0
  000de	7e 3b		 jle	 SHORT $LN9@DlgProc

; 27   : 					{
; 28   : 						// get the string into our buffer and exit
; 29   : 						GetDlgItemText(hwnd, IDC_TEXT, buf, len + 1);

  000e0	8b 45 f8	 mov	 eax, DWORD PTR _len$1[ebp]
  000e3	83 c0 01	 add	 eax, 1
  000e6	8b f4		 mov	 esi, esp
  000e8	50		 push	 eax
  000e9	68 00 00 00 00	 push	 OFFSET _buf
  000ee	68 e8 03 00 00	 push	 1000			; 000003e8H
  000f3	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  000f6	51		 push	 ecx
  000f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItemTextA@16
  000fd	3b f4		 cmp	 esi, esp
  000ff	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 30   : 						EndDialog(hwnd, 0);

  00104	8b f4		 mov	 esi, esp
  00106	6a 00		 push	 0
  00108	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  0010b	50		 push	 eax
  0010c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8
  00112	3b f4		 cmp	 esi, esp
  00114	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 31   : 					}

  00119	eb 1f		 jmp	 SHORT $LN4@DlgProc
$LN9@DlgProc:

; 32   : 					else 
; 33   : 					{
; 34   : 						MessageBox(hwnd, "Nothing entered", "Warning", MB_OK);

  0011b	8b f4		 mov	 esi, esp
  0011d	6a 00		 push	 0
  0011f	68 00 00 00 00	 push	 OFFSET ??_C@_07KGMMFLDN@Warning@
  00124	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@KGPGJABH@Nothing?5entered@
  00129	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  0012c	50		 push	 eax
  0012d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
  00133	3b f4		 cmp	 esi, esp
  00135	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@DlgProc:

; 35   : 					}
; 36   : 				}
; 37   : 				break;
; 38   : 			}
; 39   : 		break;

  0013a	eb 1b		 jmp	 SHORT $LN2@DlgProc
$LN11@DlgProc:

; 40   : 
; 41   : 		case WM_CLOSE:
; 42   : 			EndDialog(hwnd, 0);

  0013c	8b f4		 mov	 esi, esp
  0013e	6a 00		 push	 0
  00140	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00143	50		 push	 eax
  00144	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8
  0014a	3b f4		 cmp	 esi, esp
  0014c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 43   : 		break;

  00151	eb 04		 jmp	 SHORT $LN2@DlgProc
$LN12@DlgProc:

; 44   : 
; 45   : 		default:
; 46   : 			return FALSE;

  00153	33 c0		 xor	 eax, eax
  00155	eb 05		 jmp	 SHORT $LN1@DlgProc
$LN2@DlgProc:

; 47   : 	}
; 48   : 	return TRUE;

  00157	b8 01 00 00 00	 mov	 eax, 1
$LN1@DlgProc:

; 49   : }

  0015c	5f		 pop	 edi
  0015d	5e		 pop	 esi
  0015e	5b		 pop	 ebx
  0015f	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00165	3b ec		 cmp	 ebp, esp
  00167	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016c	8b e5		 mov	 esp, ebp
  0016e	5d		 pop	 ebp
  0016f	c2 10 00	 ret	 16			; 00000010H
_DlgProc@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Saishnu\Desktop\CSCI 112 - Lab 10\max2\windows32\windows32\framework.c
;	COMDAT _WinMain@16
_TEXT	SEGMENT
_hInstance$ = 8						; size = 4
_hPrevInstance$ = 12					; size = 4
_lpCmdLine$ = 16					; size = 4
_nCmdShow$ = 20						; size = 4
_WinMain@16 PROC					; COMDAT

; 78   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd

; 79   : 	_hInstance = hInstance;

  00017	8b 45 08	 mov	 eax, DWORD PTR _hInstance$[ebp]
  0001a	a3 00 00 00 00	 mov	 DWORD PTR __hInstance, eax

; 80   : 	return MainProc();

  0001f	e8 00 00 00 00	 call	 _MainProc

; 81   : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 10 00	 ret	 16			; 00000010H
_WinMain@16 ENDP
_TEXT	ENDS
END
